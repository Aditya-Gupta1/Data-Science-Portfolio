# -*- coding: utf-8 -*-
"""AgeGenderDetection.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1XVP0ZXJtDXdz_yy_2A5KffeWLw7HS-eY

# Setting up Kaggle
"""

!mkdir -p ~/.kaggle
!cp kaggle.json ~/.kaggle/
!chmod 600 /root/.kaggle/kaggle.json

"""# Downloading Dataset"""

#Downloading dataset using Kaggle API.
!kaggle datasets download -d jangedoo/utkface-new

#Unzipping the file.
!unzip \*.zip

#Removing unnecessary folder.
rm -r crop_part1

"""#Preparing Environment"""

#Checking the gpu to work fine.
import tensorflow as tf
print("Num GPUs Available: ", len(tf.config.experimental.list_physical_devices('PU')))
print(tf.test.gpu_device_name())
print(tf.config.experimental.list_physical_devices('GPU'))
tf.debugging.set_log_device_placement(True)
a = tf.constant([[1.0, 2.0, 3.0], [4.0, 5.0, 6.0]])
b = tf.constant([[1.0, 2.0], [3.0, 4.0], [5.0, 6.0]])
c = tf.matmul(a, b)
print(c)

"""#Importing Libraries"""

import os
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
from matplotlib.image import imread
from shutil import copyfile
from random import seed
from random import random
import seaborn as sns
from keras.preprocessing.image import ImageDataGenerator
from keras.utils import to_categorical
from keras.models import Sequential
from keras.layers import Conv2D, MaxPooling2D, Dense, Flatten, Dropout, BatchNormalization, Conv1D, MaxPool2D
from keras.optimizers import Adam, SGD, RMSprop
from keras.initializers import RandomNormal
from PIL import Image
from keras.models import Model
from keras.utils.vis_utils import plot_model
from sklearn.model_selection import train_test_split
from keras import Input
from sklearn.preprocessing import LabelBinarizer
import cv2
sns.set()

"""# Look into the data"""

def show_images(folder):
  i = 0
  for file in os.listdir(folder)[:9]:
    plt.subplot(330+1+i)
    image = imread(folder+'/'+file)
    plt.imshow(image)
    i += 1
  plt.show()

show_images('UTKFace')

"""#Load the data"""

images = []
age_labels = []
gender_labels = []

for f in os.listdir('utkface_aligned_cropped/UTKFace'):

  #Read and resize image to (64, 64).
  img = cv2.imread('utkface_aligned_cropped/UTKFace/'+f,0)
  img = cv2.resize(img,(64,64))
  img = img.reshape((img.shape[0], img.shape[1], 1))

  images.append(img)

  age = int(f.split('_')[0])
  gender = int(f.split('_')[1]) #1 - Female 0 - Male.

  if gender == 1:
    gender_labels.append('Female')
  else:
    gender_labels.append('Male')

  #Age is divided into 5 groups.
  if age <= 14: 
    age_labels.append('0 - 14')
  elif age > 14 and age <= 25:
    age_labels.append('14 - 25')
  elif age > 25 and age <= 40:
    age_labels.append('25 - 40')
  elif age > 40 and age <= 60:
    age_labels.append('40 - 60')
  else:
    age_labels.append('60+')

images = np.asarray(images)
age_labels = np.array(age_labels)
gender_labels = np.array(gender_labels)

#Encode the age and gender labels.
from sklearn.preprocessing import LabelBinarizer
age_binarizer = LabelBinarizer()
gender_binarizer = LabelBinarizer()
age_labels = age_binarizer.fit_transform(age_labels)
gender_labels = gender_binarizer.fit_transform(gender_labels)#1 - Male 0 - Female

"""#Utility Function to Plot Model Summary"""

def plots(history):
  print('\nPlots\n')

  plt.subplot(221)
  plt.title('Age Loss')
  plt.plot(history.history['age_output_loss'],color= 'blue', label= 'train')
  plt.plot(history.history['val_age_output_loss'], color= 'red', label= 'test')
  plt.legend()

  plt.subplot(222)
  plt.title('Gender Loss')
  plt.plot(history.history['gender_output_loss'],color= 'blue', label= 'train')
  plt.plot(history.history['val_gender_output_loss'], color= 'red', label= 'test')
  plt.legend()

  plt.subplot(223)
  plt.title('Age Accuracy')
  plt.plot(history.history['age_output_accuracy'],color= 'blue', label= 'train')
  plt.plot(history.history['val_age_output_accuracy'], color= 'red', label= 'test')
  plt.xlabel('# of Epochs')
  plt.legend()

  plt.subplot(224)
  plt.title('Gender Accuracy')
  plt.plot(history.history['gender_output_accuracy'],color= 'blue', label= 'train')
  plt.plot(history.history['val_gender_output_accuracy'], color= 'red', label= 'test')
  plt.xlabel('# of Epochs')
  plt.legend()

  plt.tight_layout()
  plt.show()

"""# Define Model"""

input = Input(shape= (64, 64, 1))

x = Conv2D(32, kernel_size= (3,3), activation= 'relu')(input)
x = Conv2D(64, (3,3), activation= 'relu', )(x)
x = MaxPool2D(pool_size= (3,3))(x)
x = Dropout(0.3)(x)

# Age Output Branch
age_output = Conv2D(128, (3,3), activation= 'relu')(x)
age_output = MaxPool2D(pool_size= (3,3))(age_output)
age_output = Dropout(0.3)(age_output)

age_output = Flatten()(age_output)
age_output = Dropout(0.4)(age_output)

age_output = Dense(64, activation= 'relu')(age_output)
age_output = Dropout(0.3)(age_output)

age_output = Dense(256, activation= 'relu')(age_output)
age_output = Dropout(0.5)(age_output)

age_output = Dense(5,activation= 'softmax', name= 'age_output')(age_output)

#Gender Output Branch
gender_output = Flatten()(x)
gender_output = Dense(512, activation= 'relu')(gender_output)
gender_output = Dropout(0.3)(gender_output)
gender_output = Dense(512, activation= 'relu')(gender_output)
gender_output = Dense(1,activation= 'sigmoid', name= 'gender_output')(gender_output)

#Defining Model
model = Model(inputs= input, outputs= [age_output, gender_output])

plot_model(model,to_file= 'model.png',expand_nested = True, show_shapes= True, dpi= 64)

"""# Compile Model"""

losses = {
    'age_output': 'categorical_crossentropy',
    'gender_output': 'binary_crossentropy'
}
lossWeights = {
    'age_output': 1.0,
    'gender_output': 1.0
}
model.compile(loss = losses, optimizer= 'adam', metrics= ['accuracy'])

"""#Split Data for Training and Evaluation"""

X_train, X_test, AgeTrainY, AgeTestY, GenderTrainY, GenderTestY = train_test_split(images, age_labels, gender_labels, test_size= 0.2, random_state= 42)

print(X_train.shape)
print(X_test.shape)
print(AgeTrainY.shape)
print(AgeTestY.shape)
print(GenderTrainY.shape)
print(GenderTestY.shape)

"""#Fit the Model"""

model.fit(X_train,
          {'age_output':AgeTrainY,'gender_output':GenderTrainY},
          validation_data= (X_test, {'age_output':AgeTestY,'gender_output':GenderTestY}),
          batch_size= 128,
          epochs= 50,
          verbose= 0)

"""#Plots"""

plots(model.history)

"""#Make Predictions"""

age_groups = ['0 - 14','14 - 25','25 - 40','40 - 60','60+']
gender_ = ['Female', 'Male']

import random
x = random.randrange(0,4000)
test_image = X_test[x].reshape((1,64,64,1))
age_pred, gender_pred = model.predict(test_image)
age = age_groups[np.argmax(age_pred)]
gender = gender_[np.argmax(gender_pred)]
plt.imshow(np.squeeze(test_image), cmap = plt.cm.gray)
plt.show()
print(f'Actual Gender : {gender_[GenderTestY[x][0]]}, Actual Age : {age_groups[np.argmax(AgeTrainY[x])]}')
print(f'Predicted Gender : {gender}, Predicted Age : {age}')